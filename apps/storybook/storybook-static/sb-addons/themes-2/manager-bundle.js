try {
	(() => {
		var q = __STORYBOOK_API__,
			{
				ActiveTabs: $,
				Consumer: Z,
				ManagerContext: J,
				Provider: Q,
				RequestResponseError: X,
				addons: s,
				combineParameters: oo,
				controlOrMetaKey: eo,
				controlOrMetaSymbol: no,
				eventMatchesShortcut: to,
				eventToShortcut: co,
				experimental_MockUniversalStore: ro,
				experimental_UniversalStore: ao,
				experimental_getStatusStore: lo,
				experimental_getTestProviderStore: Io,
				experimental_requestResponse: so,
				experimental_useStatusStore: io,
				experimental_useTestProviderStore: mo,
				experimental_useUniversalStore: uo,
				internal_fullStatusStore: po,
				internal_fullTestProviderStore: So,
				internal_universalStatusStore: _o,
				internal_universalTestProviderStore: ho,
				isMacLike: To,
				isShortcutTaken: Co,
				keyToSymbol: bo,
				merge: Eo,
				mockChannel: go,
				optionOrAltSymbol: yo,
				shortcutMatchesShortcut: Ao,
				shortcutToHumanString: fo,
				types: y,
				useAddonState: A,
				useArgTypes: Po,
				useArgs: ko,
				useChannel: f,
				useGlobalTypes: Oo,
				useGlobals: P,
				useParameter: k,
				useSharedState: Ro,
				useStoryPrepared: Lo,
				useStorybookApi: Bo,
				useStorybookState: Do,
			} = __STORYBOOK_API__;
		var e = __REACT__,
			{
				Children: xo,
				Component: Uo,
				Fragment: Go,
				Profiler: No,
				PureComponent: Fo,
				StrictMode: Ko,
				Suspense: Wo,
				__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: Yo,
				act: jo,
				cloneElement: Vo,
				createContext: zo,
				createElement: qo,
				createFactory: $o,
				createRef: Zo,
				forwardRef: Jo,
				isValidElement: Qo,
				lazy: Xo,
				memo: oe,
				startTransition: ee,
				unstable_act: ne,
				useCallback: te,
				useContext: ce,
				useDebugValue: re,
				useDeferredValue: ae,
				useEffect: le,
				useId: Ie,
				useImperativeHandle: se,
				useInsertionEffect: ie,
				useLayoutEffect: de,
				useMemo: me,
				useReducer: ue,
				useRef: pe,
				useState: Se,
				useSyncExternalStore: _e,
				useTransition: he,
				version: Te,
			} = __REACT__;
		var ye = __STORYBOOK_COMPONENTS__,
			{
				A: Ae,
				ActionBar: fe,
				AddonPanel: Pe,
				Badge: ke,
				Bar: Oe,
				Blockquote: Re,
				Button: Le,
				ClipboardCode: Be,
				Code: De,
				DL: ve,
				Div: we,
				DocumentWrapper: He,
				EmptyTabContent: Me,
				ErrorFormatter: xe,
				FlexBar: Ue,
				Form: Ge,
				H1: Ne,
				H2: Fe,
				H3: Ke,
				H4: We,
				H5: Ye,
				H6: je,
				HR: Ve,
				IconButton: S,
				Img: ze,
				LI: qe,
				Link: $e,
				ListItem: Ze,
				Loader: Je,
				Modal: Qe,
				OL: Xe,
				P: on,
				Placeholder: en,
				Pre: nn,
				ProgressSpinner: tn,
				ResetWrapper: cn,
				ScrollArea: rn,
				Separator: an,
				Spaced: ln,
				Span: In,
				StorybookIcon: sn,
				StorybookLogo: dn,
				SyntaxHighlighter: mn,
				TT: un,
				TabBar: pn,
				TabButton: Sn,
				TabWrapper: _n,
				Table: hn,
				Tabs: Tn,
				TabsState: Cn,
				TooltipLinkList: O,
				TooltipMessage: bn,
				TooltipNote: En,
				UL: gn,
				WithTooltip: R,
				WithTooltipPure: yn,
				Zoom: An,
				codeCommon: fn,
				components: Pn,
				createCopyToClipboardFunction: kn,
				getStoryHref: On,
				interleaveSeparators: Rn,
				nameSpaceClassNames: Ln,
				resetComponents: Bn,
				withReset: Dn,
			} = __STORYBOOK_COMPONENTS__;
		var xn = __STORYBOOK_ICONS__,
			{
				AccessibilityAltIcon: Un,
				AccessibilityIcon: Gn,
				AccessibilityIgnoredIcon: Nn,
				AddIcon: Fn,
				AdminIcon: Kn,
				AlertAltIcon: Wn,
				AlertIcon: Yn,
				AlignLeftIcon: jn,
				AlignRightIcon: Vn,
				AppleIcon: zn,
				ArrowBottomLeftIcon: qn,
				ArrowBottomRightIcon: $n,
				ArrowDownIcon: Zn,
				ArrowLeftIcon: Jn,
				ArrowRightIcon: Qn,
				ArrowSolidDownIcon: Xn,
				ArrowSolidLeftIcon: ot,
				ArrowSolidRightIcon: et,
				ArrowSolidUpIcon: nt,
				ArrowTopLeftIcon: tt,
				ArrowTopRightIcon: ct,
				ArrowUpIcon: rt,
				AzureDevOpsIcon: at,
				BackIcon: lt,
				BasketIcon: It,
				BatchAcceptIcon: st,
				BatchDenyIcon: it,
				BeakerIcon: dt,
				BellIcon: mt,
				BitbucketIcon: ut,
				BoldIcon: pt,
				BookIcon: St,
				BookmarkHollowIcon: _t,
				BookmarkIcon: ht,
				BottomBarIcon: Tt,
				BottomBarToggleIcon: Ct,
				BoxIcon: bt,
				BranchIcon: Et,
				BrowserIcon: gt,
				ButtonIcon: yt,
				CPUIcon: At,
				CalendarIcon: ft,
				CameraIcon: Pt,
				CameraStabilizeIcon: kt,
				CategoryIcon: Ot,
				CertificateIcon: Rt,
				ChangedIcon: Lt,
				ChatIcon: Bt,
				CheckIcon: Dt,
				ChevronDownIcon: vt,
				ChevronLeftIcon: wt,
				ChevronRightIcon: Ht,
				ChevronSmallDownIcon: Mt,
				ChevronSmallLeftIcon: xt,
				ChevronSmallRightIcon: Ut,
				ChevronSmallUpIcon: Gt,
				ChevronUpIcon: Nt,
				ChromaticIcon: Ft,
				ChromeIcon: Kt,
				CircleHollowIcon: Wt,
				CircleIcon: Yt,
				ClearIcon: jt,
				CloseAltIcon: Vt,
				CloseIcon: zt,
				CloudHollowIcon: qt,
				CloudIcon: $t,
				CogIcon: Zt,
				CollapseIcon: Jt,
				CommandIcon: Qt,
				CommentAddIcon: Xt,
				CommentIcon: oc,
				CommentsIcon: ec,
				CommitIcon: nc,
				CompassIcon: tc,
				ComponentDrivenIcon: cc,
				ComponentIcon: rc,
				ContrastIcon: ac,
				ContrastIgnoredIcon: lc,
				ControlsIcon: Ic,
				CopyIcon: sc,
				CreditIcon: ic,
				CrossIcon: dc,
				DashboardIcon: mc,
				DatabaseIcon: uc,
				DeleteIcon: pc,
				DiamondIcon: Sc,
				DirectionIcon: _c,
				DiscordIcon: hc,
				DocChartIcon: Tc,
				DocListIcon: Cc,
				DocumentIcon: bc,
				DownloadIcon: Ec,
				DragIcon: gc,
				EditIcon: yc,
				EllipsisIcon: Ac,
				EmailIcon: fc,
				ExpandAltIcon: Pc,
				ExpandIcon: kc,
				EyeCloseIcon: Oc,
				EyeIcon: Rc,
				FaceHappyIcon: Lc,
				FaceNeutralIcon: Bc,
				FaceSadIcon: Dc,
				FacebookIcon: vc,
				FailedIcon: wc,
				FastForwardIcon: Hc,
				FigmaIcon: Mc,
				FilterIcon: xc,
				FlagIcon: Uc,
				FolderIcon: Gc,
				FormIcon: Nc,
				GDriveIcon: Fc,
				GithubIcon: Kc,
				GitlabIcon: Wc,
				GlobeIcon: Yc,
				GoogleIcon: jc,
				GraphBarIcon: Vc,
				GraphLineIcon: zc,
				GraphqlIcon: qc,
				GridAltIcon: $c,
				GridIcon: Zc,
				GrowIcon: Jc,
				HeartHollowIcon: Qc,
				HeartIcon: Xc,
				HomeIcon: or,
				HourglassIcon: er,
				InfoIcon: nr,
				ItalicIcon: tr,
				JumpToIcon: cr,
				KeyIcon: rr,
				LightningIcon: ar,
				LightningOffIcon: lr,
				LinkBrokenIcon: Ir,
				LinkIcon: sr,
				LinkedinIcon: ir,
				LinuxIcon: dr,
				ListOrderedIcon: mr,
				ListUnorderedIcon: ur,
				LocationIcon: pr,
				LockIcon: Sr,
				MarkdownIcon: _r,
				MarkupIcon: hr,
				MediumIcon: Tr,
				MemoryIcon: Cr,
				MenuIcon: br,
				MergeIcon: Er,
				MirrorIcon: gr,
				MobileIcon: yr,
				MoonIcon: Ar,
				NutIcon: fr,
				OutboxIcon: Pr,
				OutlineIcon: kr,
				PaintBrushIcon: _,
				PaperClipIcon: Or,
				ParagraphIcon: Rr,
				PassedIcon: Lr,
				PhoneIcon: Br,
				PhotoDragIcon: Dr,
				PhotoIcon: vr,
				PhotoStabilizeIcon: wr,
				PinAltIcon: Hr,
				PinIcon: Mr,
				PlayAllHollowIcon: xr,
				PlayBackIcon: Ur,
				PlayHollowIcon: Gr,
				PlayIcon: Nr,
				PlayNextIcon: Fr,
				PlusIcon: Kr,
				PointerDefaultIcon: Wr,
				PointerHandIcon: Yr,
				PowerIcon: jr,
				PrintIcon: Vr,
				ProceedIcon: zr,
				ProfileIcon: qr,
				PullRequestIcon: $r,
				QuestionIcon: Zr,
				RSSIcon: Jr,
				RedirectIcon: Qr,
				ReduxIcon: Xr,
				RefreshIcon: oa,
				ReplyIcon: ea,
				RepoIcon: na,
				RequestChangeIcon: ta,
				RewindIcon: ca,
				RulerIcon: ra,
				SaveIcon: aa,
				SearchIcon: la,
				ShareAltIcon: Ia,
				ShareIcon: sa,
				ShieldIcon: ia,
				SideBySideIcon: da,
				SidebarAltIcon: ma,
				SidebarAltToggleIcon: ua,
				SidebarIcon: pa,
				SidebarToggleIcon: Sa,
				SpeakerIcon: _a,
				StackedIcon: ha,
				StarHollowIcon: Ta,
				StarIcon: Ca,
				StatusFailIcon: ba,
				StatusIcon: Ea,
				StatusPassIcon: ga,
				StatusWarnIcon: ya,
				StickerIcon: Aa,
				StopAltHollowIcon: fa,
				StopAltIcon: Pa,
				StopIcon: ka,
				StorybookIcon: Oa,
				StructureIcon: Ra,
				SubtractIcon: La,
				SunIcon: Ba,
				SupportIcon: Da,
				SweepIcon: va,
				SwitchAltIcon: wa,
				SyncIcon: Ha,
				TabletIcon: Ma,
				ThumbsUpIcon: xa,
				TimeIcon: Ua,
				TimerIcon: Ga,
				TransferIcon: Na,
				TrashIcon: Fa,
				TwitterIcon: Ka,
				TypeIcon: Wa,
				UbuntuIcon: Ya,
				UndoIcon: ja,
				UnfoldIcon: Va,
				UnlockIcon: za,
				UnpinIcon: qa,
				UploadIcon: $a,
				UserAddIcon: Za,
				UserAltIcon: Ja,
				UserIcon: Qa,
				UsersIcon: Xa,
				VSCodeIcon: ol,
				VerifiedIcon: el,
				VideoIcon: nl,
				WandIcon: tl,
				WatchIcon: cl,
				WindowsIcon: rl,
				WrenchIcon: al,
				XIcon: ll,
				YoutubeIcon: Il,
				ZoomIcon: sl,
				ZoomOutIcon: il,
				ZoomResetIcon: dl,
				iconList: ml,
			} = __STORYBOOK_ICONS__;
		var hl = __STORYBOOK_THEMING__,
			{
				CacheProvider: Tl,
				ClassNames: Cl,
				Global: bl,
				ThemeProvider: El,
				background: gl,
				color: yl,
				convert: Al,
				create: fl,
				createCache: Pl,
				createGlobal: kl,
				createReset: Ol,
				css: Rl,
				darken: Ll,
				ensure: Bl,
				ignoreSsrWarning: Dl,
				isPropValid: vl,
				jsx: wl,
				keyframes: Hl,
				lighten: Ml,
				styled: L,
				themes: xl,
				typography: Ul,
				useTheme: Gl,
				withTheme: Nl,
			} = __STORYBOOK_THEMING__;
		var h = "themes",
			T = `storybook/${h}`,
			M = "theme",
			i = `${T}/theme-switcher`,
			x = { themesList: [], themeDefault: void 0 },
			U = {},
			B = { REGISTER_THEMES: `${T}/REGISTER_THEMES` },
			D = L.div(({ theme: o }) => ({ fontSize: o.typography.size.s2 - 1 })),
			G = (o) => o.length > 1,
			N = (o) => o.length === 2,
			F = e.memo(() => {
				const { themeOverride: o, disable: d } = k(h, U),
					[{ theme: m }, C, v] = P(),
					b = s.getChannel().last(B.REGISTER_THEMES),
					w = Object.assign({}, x, {
						themesList: b?.[0]?.themes || [],
						themeDefault: b?.[0]?.defaultTheme || "",
					}),
					[{ themesList: I, themeDefault: E }, H] = A(i, w),
					u = M in v || !!o;
				f({
					[B.REGISTER_THEMES]: ({ themes: l, defaultTheme: n }) => {
						H((p) => ({ ...p, themesList: l, themeDefault: n }));
					},
				});
				let g = m || E,
					a = "";
				if ((u ? (a = "Story override") : g && (a = `${g} theme`), d))
					return null;
				if (N(I)) {
					const l = m || E,
						n = I.find((p) => p !== l);
					return e.createElement(
						S,
						{
							disabled: u,
							key: i,
							active: !o,
							title: "Theme",
							onClick: () => {
								C({ theme: n });
							},
						},
						e.createElement(_, null),
						a ? e.createElement(D, null, a) : null,
					);
				}
				return G(I)
					? e.createElement(
							R,
							{
								placement: "top",
								trigger: "click",
								closeOnOutsideClick: !0,
								tooltip: ({ onHide: l }) =>
									e.createElement(O, {
										links: I.map((n) => ({
											id: n,
											title: n,
											active: m === n,
											onClick: () => {
												C({ theme: n }), l();
											},
										})),
									}),
							},
							e.createElement(
								S,
								{ key: i, active: !o, title: "Theme", disabled: u },
								e.createElement(_, null),
								a && e.createElement(D, null, a),
							),
						)
					: null;
			});
		s.register(T, () => {
			s.add(i, {
				title: "Themes",
				type: y.TOOL,
				match: ({ viewMode: o, tabId: d }) =>
					!!(o && o.match(/^(story|docs)$/)) && !d,
				render: F,
				paramKey: h,
			});
		});
	})();
} catch (e) {
	console.error(
		"[Storybook] One of your manager-entries failed: " + import.meta.url,
		e,
	);
}
